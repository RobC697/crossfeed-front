version: 2.1
jobs:
  build:
    working_directory: ~/crossfeed-web-chase
    docker:
      - image: circleci/node:13.8.0 # the primary container, where your job's commands are run
        environment:
          LOG_FILE: /home/circleci/crossfeed-web-chase/logs/
          ENVIRONMENT: DEV
          # APP_PASSWORD:
          # SESSION_SECRET:
          # NODE_ENV: development

          # BD_API_KEY:

          # GOOGLE_CLIENT_ID:
          # GOOGLE_CLIENT_SECRET:
          # GOOGLE_REDIRECT_URL: http://localhost:3000/auth/google/callback

          # AWS_REGION: us-east-1
          # SQS_URL:

      - image: circleci/postgres:12.0 #the postgress container
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: database_development
          POSTGRES_PASSWORD: "postgres"
          POSTGRES_PORT: 5432
          POSTGRES_HOST: localhost
    steps:
      - checkout # check out the code in the project directory
      - run:
          name: Check current directory
          command: pwd
      - run:
          name: update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache: # special step to restore the dependency cache
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: install npm dependencys
          command: npm install
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: install npm react 
          command: npm install react-scripts@3.0.1 -g --silent
      # - run:  ------Currently irelivent untill we integrate the sql db into frontend
      #     name: install psql CLI
      #     command: sudo apt install -y postgresql-client || true
      # - run:
      #     name: run sequalize migration
      #     command: npx sequelize-cli db:migrate
      - run: # run tests
          name: run server code
          command: npm start
  deploy_to_aws:
    working_directory: ~/crossfeed
    docker:
      - image: circleci/python:3.8
        environment: 
          AWS_ACCESS_KEY_ID:  #move these to circleci project variables
          AWS_SECRET_ACCESS_KEY:  #move these to circleci project variables
    steps:
      - setup_remote_docker
      - checkout:
            path: ~/crossfeed
      - run:
           name: Installing AWS CLI
           command: 'pip install -U "pip>20.0.1" && pip install awscli --upgrade --user' #may need to add to path
      - run:
           name: Making deploy script executable
           command: 'sudo chmod +x deploy.sh'
      - run:
           name: Installing Terraform and Running AWS Deployment Script
           command:  './deploy.sh'

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - hold: # <<< A job that will require manual approval in the CircleCI web application.
          type: approval
          requires:
            - build
          filters:
            branches:
              only: master #edit these based on when we want to require manual approval
      - deploy_to_aws:
          requires:
            - build
          filters:
            branches:
              ignore: master
              #only: staging